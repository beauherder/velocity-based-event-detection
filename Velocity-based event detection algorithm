In this document you find the instruction and algorithm to customize velocity-based even detection as described bij K. Holmqvist et al. (2011).
The first step is customized for my dataset, but illustrates how to prepare raw data for step 2.  The "pro" prefix reverse to the prosaccade task in my study. 
Look out for #---> TO DO, this signals instructions for customizations 

Prep:

# Prep 1: creating paths and folders for document management
# The following code creates folders, "ProcessedData" to save data and plots
# and "RawData" that contains the raw data files

path <- "U:/My Documents/Master_Thesis/Huidig dataverwerking"
dir.create(paste0(path, "/ProcessedData"))
dir.create(paste0(path, "/RawData"))
OutputPath <- paste(path, "ProcessedData",sep="/"
RawDataPath <- paste(path, "RawData",sep="/")

#---> TO DO: add the raw data files to the folder "RawData"

# prep 2: read in data

prosaccade_files <- list.files(PRawDataPath,
                               pattern = "\\.csv$",
                               full.names = TRUE)

################### Step 1: Preprocessing data ###################
## Step 1.1: Make Prosaccade item list
pro_items_list <- split(prosaccade_prediction_data,
                        prosaccade_prediction_data$Prosaccade_Number)

for (i in names(pro_items_list)) {
  assign(paste0("pro_item_", i), pro_items_list[[i]])
}

## Step 1.2: we make a number of lists to use for saccade detection.
List_ppn = unique(prosaccade_prediction_data$Participant)#make a list of participants
List_trials = unique(prosaccade_prediction_data$Prosaccade_Number)#make a list of trials
list_hor <- c(3, 4, 11, 12, 1, 2, 9, 10) #make a list of horizontal trials
list_ver <- c(5,6,13,14,7,8,15,16)#make a list of vertical trials

## Step 1.3: getting the saccades.
### Step 1.3.1: the prediction data is split up per prosaccade.
pro_items_list <- split(prosaccade_prediction_data,
                        prosaccade_prediction_data$Prosaccade_Number)

for (i in names(pro_items_list)) {
  assign(paste0("pro_item_", i), pro_items_list[[i]])
}

################### Step 2: Calculating velocity and apply velocity threshold (usually within 30-100Â°/s) ###################
## Step 2.1: Running through the dataframes per prosaccade and calculate the parameters; 
##this is were the velocity-based even detection takes place. 
for (j in List_trials) {
  df <- get(paste0("pro_item_", j)) %>%
    arrange(Participant, file, Elapsed) %>%
    group_by(Participant, file) %>%
    mutate(
      delta_x = Gaze_X - lag(Gaze_X),
      delta_y = Gaze_Y - lag(Gaze_Y),
      delta_t = (Elapsed - lag(Elapsed)) / 1000,  # convert ms to seconds
      distance_dva = sqrt((delta_x * deg_per_px_hor)^2 + (delta_y * deg_per_px_ver)^2),
      velocity_dva = distance_dva / delta_t,
      direction_deg = ifelse(
        !is.na(velocity_dva) & velocity_dva >= 60 ,
        (rad2deg(atan2(delta_y, delta_x)) + 360) %% 360,
        NA
      ),
      is_saccade = velocity_dva >= 60
    ) %>%
    ungroup()
  assign(paste0("pro_item_", j), df)

## Step 2.2: now we know whether a sample is part of a saccade or not, we can extract the saccades.
### Step 2.2.1: Group per participant for saccade event segmentation
pro_saccade_events_list <- list()
for (i in List_trials) {
  grouped <- get(paste0("pro_item_", i)) %>%
    group_by(Participant, file) %>%
    group_split()
  for (participant_data in grouped) {
    pid <- unique(participant_data$Participant)
    rle_vals <- rle(participant_data$is_saccade)
    ends <- cumsum(rle_vals$lengths)
    starts <- ends - rle_vals$lengths + 1
    counter <- 1
    for (j in seq_along(rle_vals$values)) {
      if (rle_vals$values[j] && rle_vals$lengths[j] >= 3) {
        chunk <- participant_data[starts[j]:ends[j], ]
        pro_saccade_events_list[[length(pro_saccade_events_list) + 1]] <- tibble(
          Participant        = pid,
          file           = unique(chunk$file),
          item               = as.integer(i),
          Saccade_ID         = paste0("P", pid, "_Item_", i, "_Saccade_", counter),
          start_time         = min(chunk$Elapsed, na.rm = TRUE),
          end_time           = max(chunk$Elapsed, na.rm = TRUE),
          duration_s         = end_time - start_time,
          start_x            = chunk$Gaze_X[1],
          start_y            = chunk$Gaze_Y[1],
          end_x              = chunk$Gaze_X[nrow(chunk)],
          end_y              = chunk$Gaze_Y[nrow(chunk)],
          mean_direction_deg = mean(chunk$direction_deg, na.rm = TRUE)
        )
        counter <- counter + 1
      }
    }
  }
}

### Step 2.2.2: get them all in a dataframe, this gives all saccades per trial per person
pro_saccade_events_df <- bind_rows(pro_saccade_events_list)

################### Step 3: create plots for manual inspection or validation of chosen threshold ###################
## Step 3.1 making individual gaze plots with x over time and y over time next to it.
dir.create(paste0(OutputPath, "/Images2"))

## Step 3.2 for horizontal saccades.
for (j in list_hor) { #for each item
  for (i in List_ppn)   {    # for each participant....
    
    pdfname = paste(OutputPath,"/Images2", sep = "") #location of the pdf
    
    AdvETUploadData_00 <- get(paste0("pro_item_", j)) %>%
      filter(Participant == i)
    
    # This is a raw data plot (one point per sample) with dots colored to represent whether this is a saccade or not
    rawplot1 <- AdvETUploadData_00 %>%
      ggplot(aes(Gaze_X, Gaze_Y, xmin = 0, xmax = res_h, ymin = 0, ymax = res_v, color = is_saccade))  + #note that xmax and ymax are specified to give some space around the box with good data. If values are higher, they aren't shown
      # geom_rect(xmin = 0, xmax = 1, ymin = 0, ymax = 1, fill = 'white', color = 'darkgrey')+ #This draws a rectangle the size of the screen
      theme_classic()+
      geom_point()+
      geom_point(size = 1.0) +
      scale_x_continuous(name="x") + 
      scale_y_continuous(name="y") +coord_fixed() + 
      #  facet_wrap(~file)+
      theme(text = element_text(size = 20)) +
      ggtitle(i)
    
    rawplot2 <- # X-over time plot for 2.5 seconds
      AdvETUploadData_00 %>%
      ggplot(aes(Elapsed, Gaze_X, ymin = 0, ymax = res_h)) +geom_line()+ 
      xlim(000,2500)+
      facet_wrap(~file)
    print (paste0("img_item",j,"_ppn", i, ".pdf")) 
    combined_plot <- rawplot1 | rawplot2 
    combined_plot
    # save the combined plot
    
    ggsave(filename = paste0("img_item",j,"_ppn", i, ".pdf"),
           plot = combined_plot,
           path = pdfname, 
           width = 12,      # increase width (in inches)
           height = 8,      # increase height (in inches)
           device = "pdf")
    
  }
}

## Step 3.3: for vertical saccades.
for (j in list_ver) { #for each item
  for (i in List_ppn)   {    # for each participant....
    
    pdfname = paste(OutputPath,"/Images2", sep = "") #location of the pdf
    
    AdvETUploadData_00 <- get(paste0("pro_item_", j)) %>%
      filter(Participant == i)
    
    # This is a raw data plot (one point per sample) with dots colored to represent whether this is a saccade or not
    rawplot1 <- AdvETUploadData_00 %>%
      ggplot(aes(Gaze_X, Gaze_Y, xmin = 0, xmax = res_h, ymin = 0, ymax = res_v, color = is_saccade))  + #note that xmax and ymax are specified to give some space around the box with good data. If values are higher, they aren't shown
      # geom_rect(xmin = 0, xmax = 1, ymin = 0, ymax = 1, fill = 'white', color = 'darkgrey')+ #This draws a rectangle the size of the screen
      theme_classic()+
      geom_point()+
      geom_point( size = 1.0) +
      scale_x_continuous(name="x") + 
      scale_y_continuous(name="y") +coord_fixed() + 
      #  facet_wrap(~file)+
      theme(text = element_text(size = 20)) +
      ggtitle(i)
    
    rawplot2 <- # Y-over time plot for 2.5 seconds
      AdvETUploadData_00 %>%
      ggplot(aes(Elapsed, Gaze_Y, ymin = 0, ymax = res_h)) +geom_line()+ 
      xlim(000,2500)+
      facet_wrap(~file)
    
    print (paste0("img_item",j,"_ppn", i, ".pdf"))
    combined_plot <- rawplot1 | rawplot2 
    combined_plot
    # Now save it
    
    ggsave(filename = paste0("img_item_",j,"_ppn", i, ".pdf"),
           plot = combined_plot,
           path = pdfname, 
           width = 12,      # increase width (in inches)
           height = 8,      # increase height (in inches)
           device = "pdf")
    
  }
}

################### Step 4: check if the threshold filters out noise in data ###################
# Plot raw gaze data, gaze velocity, and the resulting saccade classifications to visually validate whether the chosen threshold and filtering are appropriate.
# If the data still takes too much noise into account or does not find saccades, adjust the threshold in the code for step 2 and repeat step 2, 3 and 4. 


